@inject ResourcesHttpRepository repo
@inject NavigationManager UriHelper
@inject ZestClient client

<div class="row-fluid">
    <div class="col-12">
        <div class="row">
            <div class="col-12">
                <h1>@(resource.Id==0? "Create resource" : "Update resource")</h1>
            </div>
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <EditForm Model="@resource" OnSubmit="FormSubmitted" enctype="multipart/form-data">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group">
                                <label for="name">Name</label>
                                <input type="text" required name="name" class="form-control" id="name" placeholder="enter your name" @bind-value="resource.Name">
                            </div>

                            <div class="form-group mb-4">
                                <label for="picture">Picture</label>
                                @if (!string.IsNullOrEmpty(resource.Picture))
                                {
                                    <RadzenImage src="@resource.Picture" style="max-width:150px;" />
                                }
                                <InputFile OnChange="@LoadFile" />
                            </div>

                            <div class="form-group">
                                <label for="description">Description</label>
                                <textarea class="form-control" name="description" @bind="resource.Description" required id="description" placeholder="Enter a description">
                                   
                                </textarea>
                            </div>

                            <div class="row">
                                <div class="col-md-6 col-12">
                                    <h4>Date start</h4> <RadzenDatePicker TValue="DateTime?" @bind-Value="startDate" DateFormat="dd/MM/yyyy" />
                                </div>
                                <div class="col-md-6 col-12">
                                    <h4>Date end</h4> <RadzenDatePicker TValue="DateTime?" @bind-Value="endDate" DateFormat="dd/MM/yyyy" />
                                </div>
                            </div>

                            <button type="submit" class="btn btn-outline-success mt-3">@(resource.Id==0? "Create" : "Update")</button>

                        </EditForm>

                        @if (resource.Id != 0 && client.CurrentUser.Id == resource.Author.Id)
                        {
                            <button class="btn btn-outline-danger ml-2 mt-3 " @onclick="DeleteResource">Delete</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code { 
    [Parameter]
    public Resource resource { set; get; }

    public string image;
    public IBrowserFile file = null;
    DateTime? value = DateTime.Now;

    private DateTime? startDate = (DateTime.Now);
    private DateTime? endDate = null;

    private const string DATE_FORMAT_EXPORT = "yyyy-MM-dd";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        startDate = DateTime.ParseExact(resource.DateStart, DATE_FORMAT_EXPORT, System.Globalization.CultureInfo.InvariantCulture);
        if (resource.DateEnd != null)
            endDate = DateTime.ParseExact(resource.DateEnd, DATE_FORMAT_EXPORT, System.Globalization.CultureInfo.InvariantCulture);
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    async Task DeleteResource()
    {
        if (resource.Id == 0 || client.CurrentUser.Id != resource.Author.Id) return;
        await repo.Delete(resource.ShareId);
        UriHelper.NavigateTo("/");
    }

    async Task FormSubmitted(EditContext edit)
    {
        bool isValid = edit.Validate();

        if (isValid)
        {
            resource.DateStart = startDate?.ToString(DATE_FORMAT_EXPORT);
            resource.DateEnd = endDate?.ToString(DATE_FORMAT_EXPORT);

            var formContent = new MultipartFormDataContent
    {
                // Send form text values here
                {new StringContent(resource.Name), "name"},
                {new StringContent(resource.Description),"description" },
                {new StringContent(resource.DateStart),"date_start" },
            };

            if (!string.IsNullOrEmpty(resource.DateEnd))
            {
                formContent.Add(new StringContent(resource.DateEnd), "date_end");
            }

            if (file != null)
            {
                formContent.Add(new StreamContent(file.OpenReadStream()), "picture", file.Name);
            }

            if (resource.Id == 0)
            {
                //create
                var res = await client.RequestMultipart<Resource, Resource>(repo.ApiPath, HttpMethod.Post, formContent);
                UriHelper.NavigateTo($"/calendars/{res.ShareId}");
            }
            else
            {
                //update
                var res = await client.RequestMultipart<Resource, Resource>($"{repo.ApiPath}/{resource.ShareId}", HttpMethod.Patch, formContent);
                UriHelper.NavigateTo($"/calendars/{resource.ShareId}");
            }
        }

    }

}