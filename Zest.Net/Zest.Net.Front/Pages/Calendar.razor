@page "/calendar"
@using System.Linq;
@inject Radzen.DialogService DialogService

<h1>Calendar</h1>

<div class="col-xl-6">
    <RadzenScheduler @ref=@calendar style="height: 700px;" TItem="DataItem" Data=@bookings StartProperty="Start" EndProperty="End"
                     TextProperty="Text" SelectedIndex="2"
                     SlotSelect=@OnSlotSelect AppointmentSelect=@OnEventSelect>
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>
</div>


@code {
    const string RESOURCE_ID = "JZHMYHtAVY9DmrFXKs84uH";


    [Inject]
    public ResourcesHttpRepository resourcesRepository { get; set; }

    [Inject]
    public ZestClient client { get; set; }

    RadzenScheduler<DataItem> calendar;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Booking> resourcesList;

    IList<DataItem> bookings = new List<DataItem>();

    protected override async Task OnInitializedAsync()
    {
        var data = await resourcesRepository.GetBookings(RESOURCE_ID);

        resourcesList = data.Bookings.ToList();

        foreach (var r in resourcesList)
        {
            DataItem di = new DataItem { Id = r.Id, Start = Convert.ToDateTime(r.DateStart), End = Convert.ToDateTime(r.DateEnd), Text = r.User.Username };

            bookings.Add(di);
        }

        await calendar.Reload();
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        DataItem data = await DialogService.OpenAsync<AddEventPage>("Add Appointment",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        if (data != null)
        {
            bookings.Add(data);


            // Either call the Reload method or reassign the Data property of the Scheduler
            await calendar.Reload();

            Booking b = new Booking();

            b.DateStart = data.Start.ToString("yyyy-MM-ddTHH:mm:ss");
            b.DateEnd = data.End.ToString("yyyy-MM-ddTHH:mm:ss");
            b.User = client.CurrentUser;

            await resourcesRepository.PostBooking(RESOURCE_ID, b);
        }
    }

    async Task OnEventSelect(SchedulerAppointmentSelectEventArgs<DataItem> args)
    {
        await DialogService.OpenAsync<ShowEventPage>("Show Event", new Dictionary<string, object> { { "Event", args.Data } });

        await calendar.Reload();
    }

}
