@page "/calendars/{shareId}"
@using System.Linq;
@inject Radzen.DialogService DialogService

<h1>Calendar for: @Title</h1>

<div class="row">
    <div class="col-xl-8">
        <RadzenScheduler @ref=@calendar style="height: 700px;" TItem="DataItem" Data=@bookings StartProperty="Start" EndProperty="End"
                         TextProperty="Text" SelectedIndex="2"
                         SlotSelect=@OnSlotSelect AppointmentSelect=@OnEventSelect>
            <RadzenDayView />
            <RadzenWeekView />
            <RadzenMonthView />
        </RadzenScheduler>
    </div>

    <div class="col-xl-4">
        <RadzenFieldset Style="width:500px;margin-bottom: 20px;">
            <HeaderTemplate>
                <span>
                    <b style="font-size:30px">Informations</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <RadzenImage Path="@ResourceImagePath" Style="width:450px"></RadzenImage>
                <h3>Description</h3>
                <p>@Description</p>

            </ChildContent>
        </RadzenFieldset>
    </div>
</div>


<RadzenButton ButtonType="ButtonType.Button" Disabled="@(CurrentUserId != ResourceUserId)" Text="Edit calendar" Style="margin:1em 1em 1em 1em" Click=NavigateEdit/>

@code {
    [Parameter]
    public string ShareId { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    public ResourcesHttpRepository resourcesRepository { get; set; }

    [Inject]
    public ZestClient client { get; set; }

    public string Title { get; set; }

    public int CurrentUserId { get; set; }

    public int ResourceUserId { get; set; }

    public string ResourceImagePath { get; set; }

    public string Description { get; set; }

    RadzenScheduler<DataItem> calendar;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Booking> resourcesList;

    IList<DataItem> bookings = new List<DataItem>();

    private void NavigateEdit()
    {
        navigationManager.NavigateTo($"/resources/{ShareId}/edit");
    }

    protected override async Task OnInitializedAsync()
    {
        var data = await resourcesRepository.GetBookings(ShareId);

        var res = await resourcesRepository.GetById(ShareId);

        Title = res.Name;

        CurrentUserId = client.CurrentUser.Id;
        ResourceUserId = res.Author.Id;
        ResourceImagePath = res.Picture;
        Description = res.Description;


        resourcesList = data.Bookings.ToList();

        foreach (var r in resourcesList)
        {
            DataItem di = new DataItem { Id = r.Id, Start = Convert.ToDateTime(r.DateStart).AddHours(-2), End = Convert.ToDateTime(r.DateEnd).AddHours(-2), Text = r.User.Username };

            bookings.Add(di);
        }
        await calendar.Reload();
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        DataItem data = await DialogService.OpenAsync<AddEventPage>("Add Appointment",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", (args.End.AddSeconds(-1.0)) }});

        if (data != null)
        {
            data.Text = client.CurrentUser.Username;

            bookings.Add(data);

            await calendar.Reload();

            Booking b = new Booking();

            b.DateStart = data.Start.ToString("yyyy-MM-ddTHH:mm:ss");
            b.DateEnd = data.End.ToString("yyyy-MM-ddTHH:mm:ss");
            b.User = client.CurrentUser;

            var bo = await resourcesRepository.PostBooking(ShareId, b);
        }
    }

    async Task OnEventSelect(SchedulerAppointmentSelectEventArgs<DataItem> args)
    {
        DataItem data = await DialogService.OpenAsync<ShowEventPage>("Show Event", new Dictionary<string, object> { { "Event", args.Data } });

        if (data != null)
        {
            bookings.Remove(data);
            await resourcesRepository.DeleteBooking(ShareId, data.Id);

            await calendar.Reload();
        }
    }
}
